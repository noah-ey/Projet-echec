#include <stdlib.h>
#include <stdio.h>

#define NB_LIGNE 8


// Définition des structures
typedef enum piece { 
    vide, pion, tour, cavalier, fou, reine, roi 
} Piece;
typedef enum couleur {
blanc, noir 
} Couleur;

typedef struct Case {
    Piece p;
    Couleur c;
} Case;

typedef struct coup {
    int xFrom;
    int yFrom;
    int xTo;
    int yTo;
} Coup;

typedef struct partie {
    Case** echiquier;
    Couleur joueur_actif;
} Partie;



//Définitons de toutes les fonctions
Case **creer_plateau();
void liberer_plateau(Case **plateau);
char aff_char(Case case_jeu);
char* couleur_piece(Couleur c);
void afficher_plateau(Case** plateau);

Coup proposition_joueur();
int verifier_proposition(Coup prop);
int verifier_coup(Partie* partie, Coup coup);

// fonction qui deplace la piece sans condition
void deplacement(Coup coup){
    echiquier[xTo][yTo] = echiquier[xFrom][yFrom];
    echiquier[xFrom][yFrom].p = vide;
    return;
}
// fonctin qui verifie que le mouvement soit vertical
int verti (Coup coup){
    if (yFrom == yTo)){
        printf("mouvement impossible car il n'est pas verti\n");
        return 1;
    }
    return 0;
}
// fonctin qui verifie que le mouvement soit horizontal
int horiz (Coup coup){
    if ((yFrom == xTo) {
        printf("mouvement impossible car il n'est pas horiz\n");
        return 1;
    }
    return 0;
}
// fonctin qui verifie que le mouvement soit diagonal
int diagonal (Coup coup){
    if (xTo - xFrom == yTo - yFrom){  // dans la premiere diagonal
        return 1;
    } if (-yTo + xFrom == xTo - yFrom){  // dans la deuxieme diagonal 
        return 1;
    } if (yTo + xFrom == xTo + yFrom){  // dans la deuxieme diagonal en bas
        return 1;
    }
    return 0;
}
// fonctin qui verifie que le mouvement soit bon pour le cavalier et réalise le déplacement
int mouvcavalier (Coup coup){
    if (((abs (coup.xTo - coup.xFrom) == 2) && (abs (coup.yTo - coup.yFrom) == 1) || 
        (abs (coup.xTo - coup.xFrom) == 2) && (abs (coup.yTo - coup.yFrom) == 1))) && (echiquier[xTo][yTo]==;{
        return 0;
    } 
    printf("Mouvement impossible car cela ne correspond pas au cavalier\n");
    return 1;
}

// fonctin qui verifie que le mouvement soit bon pour la tour et réalise le déplacement
void mouvtour (Coup coup){
    if ((abs (coup.xTo - coup.xFrom) == 2) && (abs (coup.yTo - coup.yFrom) == 1) || (abs (coup.xTo - coup.xFrom) == 2) && (abs (coup.yTo - coup.yFrom) == 1)){
        return;
    } 
    printf("Mouvement impossible car cela ne correspond pas à la tour\n");
    return;
}
